CNN{}
filter{name:001-010-100;dimension:3;filter:001010100;}
filter{name:101-010-101;dimension:3;filter:101010101;}
filter{name:100-010-001;dimension:3;filter:100010001;}
convolutedMap{000211000031021300002100103201221000010011220013010201012202101100211001031011310}
convolutedMap{001322001132022400012200213212341101010013221125111201012303212200221101142213420}
convolutedMap{001221001111001200011100211111230101000012111123111000001101212100011100122212210}
convolutedMap{000211000031021300002100103201221000010011220013010201012202101100211001031011310}
convolutedMap{001322001132022400012200213212341101010013221125111201012303212200221101142213420}
convolutedMap{001221001111001200011100211111230101000012111123111000001101212100011100122212210}
pooledMap{3223222113121221}
pooledMap{3324234225322332}
pooledMap{1222123223211112}
pooledMap{3223222113121221}
pooledMap{3324234225322332}
pooledMap{1222123223211112}
pooledMap{3223222113121221}
pooledMap{3324234225322332}
pooledMap{1222123223211112}
outputs{5,75459620298566;1,28568772891801;7,37569071369976;5,04980235456014}
ANN{
alpha:0,05;
epochs:1000;
}layer{
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:4;
bias:0;
outputValue:4;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:4;
bias:0;
outputValue:4;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:5;
bias:0;
outputValue:5;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:3;
bias:0;
outputValue:3;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:1;
bias:0;
outputValue:1;
errorGradient:0;
]
neuron[
AF:ReLU;
isInput:True;
inputValue:2;
bias:0;
outputValue:2;
errorGradient:0;
]
}
layer{
neuron[
AF:ReLU;
isInput:False;
inputValue:0;
bias:0;
outputValue:5,75459620298566;
errorGradient:0;
weight:0,795990065576504;
weight:0,256268092084801;
weight:-0,00106502277826193;
weight:-0,0666915565108376;
weight:-0,327857970878416;
weight:-0,321321745087077;
weight:0,5337628440623;
weight:0,88424718653981;
weight:-0,363189740741248;
weight:-0,232590304330266;
weight:-0,813952195371479;
weight:-0,813023903320089;
weight:-0,530201172237378;
weight:-0,940139614949068;
weight:0,200549067557114;
weight:0,925494413788195;
weight:0,527954717878231;
weight:0,712106861040046;
weight:0,502438971541095;
weight:0,301290417696019;
weight:0,767166087295472;
weight:0,130978813921557;
weight:-0,702233452211243;
weight:0,736408534337025;
weight:-0,67683172769697;
weight:0,685763879532816;
weight:0,0569301224578778;
weight:-0,516127571238264;
weight:0,666023356684494;
weight:-0,250834447914192;
weight:-0,827644869604914;
weight:0,553877391644696;
weight:0,530820345287593;
weight:0,0936954808857737;
weight:-0,672271932322659;
weight:-0,739612606232805;
weight:-0,275348556821863;
weight:-0,152752463311307;
weight:0,613431216037567;
weight:0,837280253803954;
weight:0,131582219680577;
weight:0,0571001502951143;
weight:-0,976782714937247;
weight:-0,546378308695917;
weight:-0,194819595289798;
weight:-0,565503750725418;
weight:0,197232209703528;
weight:0,924212873878057;
input:3;
input:2;
input:2;
input:3;
input:2;
input:2;
input:2;
input:1;
input:1;
input:3;
input:1;
input:2;
input:1;
input:2;
input:2;
input:1;
input:3;
input:3;
input:2;
input:4;
input:2;
input:3;
input:4;
input:2;
input:2;
input:5;
input:3;
input:2;
input:2;
input:3;
input:3;
input:2;
input:1;
input:2;
input:2;
input:2;
input:1;
input:2;
input:3;
input:2;
input:2;
input:3;
input:2;
input:1;
input:1;
input:1;
input:1;
input:2;
]
neuron[
AF:ReLU;
isInput:False;
inputValue:0;
bias:0;
outputValue:1,28568772891801;
errorGradient:0;
weight:-0,478568882438619;
weight:0,811743657017007;
weight:0,299877744773346;
weight:0,454237733713462;
weight:-0,885507364704044;
weight:0,402031960618697;
weight:-0,334988748345053;
weight:-0,0414984557039563;
weight:0,262526442884713;
weight:-0,389859828813868;
weight:-0,0136218504112315;
weight:0,621748132455045;
weight:0,0498904153005642;
weight:-0,781776170144685;
weight:0,887644707172944;
weight:-0,404945434725352;
weight:-0,367829587016175;
weight:-0,343844248607682;
weight:0,376103346876848;
weight:0,732132317373591;
weight:-0,0598383262100808;
weight:0,200842970610057;
weight:-0,319292818810461;
weight:-0,901324354997521;
weight:0,665158717737141;
weight:-0,830291801984558;
weight:-0,289934062999643;
weight:0,107761528858804;
weight:0,844144856484674;
weight:-0,0687718703731763;
weight:0,888672023028448;
weight:-0,511468330170712;
weight:0,132717248579821;
weight:0,520345801264209;
weight:0,144592239123114;
weight:-0,0625781049311991;
weight:-0,12752261437826;
weight:-0,900360342068765;
weight:0,416327709991637;
weight:0,691663520267077;
weight:0,662716816022395;
weight:0,301885849471151;
weight:0,462125000293425;
weight:-0,76289263449744;
weight:-0,372946933551201;
weight:-0,784467878651092;
weight:-0,918308195619987;
weight:-0,161123679560201;
input:3;
input:2;
input:2;
input:3;
input:2;
input:2;
input:2;
input:1;
input:1;
input:3;
input:1;
input:2;
input:1;
input:2;
input:2;
input:1;
input:3;
input:3;
input:2;
input:4;
input:2;
input:3;
input:4;
input:2;
input:2;
input:5;
input:3;
input:2;
input:2;
input:3;
input:3;
input:2;
input:1;
input:2;
input:2;
input:2;
input:1;
input:2;
input:3;
input:2;
input:2;
input:3;
input:2;
input:1;
input:1;
input:1;
input:1;
input:2;
]
neuron[
AF:ReLU;
isInput:False;
inputValue:0;
bias:0;
outputValue:7,37569071369976;
errorGradient:0;
weight:0,858567126029435;
weight:-0,826990008273623;
weight:0,778340497882264;
weight:0,821128862826679;
weight:-0,807919443495534;
weight:-0,976635046292392;
weight:0,320588146951323;
weight:0,131036475827469;
weight:0,201202099770867;
weight:0,789079015976321;
weight:0,944784437280514;
weight:-0,30803397638166;
weight:0,557249722796143;
weight:0,114356687811369;
weight:-0,668701686742111;
weight:-0,278531851842316;
weight:-0,50215352024052;
weight:-0,510969116124776;
weight:0,529544614036356;
weight:0,0736315907322018;
weight:-0,0497771878958574;
weight:0,722577179652907;
weight:-0,46746924494741;
weight:0,23982804140068;
weight:0,684439826609772;
weight:-0,930584498648804;
weight:0,638275824318768;
weight:0,738717970316633;
weight:-0,556400184313022;
weight:0,47162257855368;
weight:0,449626596388233;
weight:-0,91198360636457;
weight:0,871189616560559;
weight:-0,0278110490310057;
weight:0,985577730455239;
weight:-0,241781862099553;
weight:-0,889668474853816;
weight:-0,332597192997391;
weight:-0,0593633079246447;
weight:0,496980847556601;
weight:0,82400409217179;
weight:0,806385419241332;
weight:0,671275285850873;
weight:-0,689439358045086;
weight:0,471543272711124;
weight:-0,000302503351263028;
weight:-0,894532906773748;
weight:-0,812470838340219;
input:3;
input:2;
input:2;
input:3;
input:2;
input:2;
input:2;
input:1;
input:1;
input:3;
input:1;
input:2;
input:1;
input:2;
input:2;
input:1;
input:3;
input:3;
input:2;
input:4;
input:2;
input:3;
input:4;
input:2;
input:2;
input:5;
input:3;
input:2;
input:2;
input:3;
input:3;
input:2;
input:1;
input:2;
input:2;
input:2;
input:1;
input:2;
input:3;
input:2;
input:2;
input:3;
input:2;
input:1;
input:1;
input:1;
input:1;
input:2;
]
neuron[
AF:ReLU;
isInput:False;
inputValue:0;
bias:0;
outputValue:5,04980235456014;
errorGradient:0;
weight:0,515639217344876;
weight:-0,870793413310681;
weight:0,726501237473684;
weight:-0,447852809656343;
weight:0,765244729707597;
weight:0,185349765785667;
weight:-0,864010053623472;
weight:0,640479236673787;
weight:-0,461487543518416;
weight:-0,863310963783092;
weight:-0,87733494484673;
weight:-0,61491087061116;
weight:0,581870176634691;
weight:-0,31256333985951;
weight:0,729579521217188;
weight:-0,660547580411913;
weight:0,856768043645084;
weight:-0,179223592942219;
weight:-0,414939228172851;
weight:0,12877895735613;
weight:0,573080175357442;
weight:-0,3888633769885;
weight:0,830443672756871;
weight:0,548394191799869;
weight:-0,967436233520245;
weight:0,249627498560412;
weight:0,143837392862811;
weight:-0,948698106197965;
weight:-0,778029886902324;
weight:0,768284768689556;
weight:-0,315257670038965;
weight:0,963948408124944;
weight:0,450746662658987;
weight:-0,392108716718903;
weight:-0,0720394016578977;
weight:0,342415991864361;
weight:0,723125358914549;
weight:0,535869203291772;
weight:-0,894055113147039;
weight:0,786839185183327;
weight:0,849587784078712;
weight:0,11773890122666;
weight:0,571819068664601;
weight:-0,469286229214299;
weight:-0,182028363077914;
weight:0,111891718167761;
weight:-0,757866084462901;
weight:0,118948759100842;
input:3;
input:2;
input:2;
input:3;
input:2;
input:2;
input:2;
input:1;
input:1;
input:3;
input:1;
input:2;
input:1;
input:2;
input:2;
input:1;
input:3;
input:3;
input:2;
input:4;
input:2;
input:3;
input:4;
input:2;
input:2;
input:5;
input:3;
input:2;
input:2;
input:3;
input:3;
input:2;
input:1;
input:2;
input:2;
input:2;
input:1;
input:2;
input:3;
input:2;
input:2;
input:3;
input:2;
input:1;
input:1;
input:1;
input:1;
input:2;
]
}
